(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 *  COUNTY DASHBOARD
 *
 *  This app creates a dashboard that allows the user to toggle between
 *  Washington state, region and county maps and get population/trend data
 *  for each view. It was originally created in 2013.
 */

// Require all modules so that they can be initialized
var Events = require('./modules/Events.js');
var DataService = require('./modules/Dataservice.js');

// UI Modules
var ContextSwitcher = require('./modules/ContextSwitcher.js');
var FastFacts = require('./modules/FastFacts.js');
var Map = require('./modules/Map.js');
var Sparklines = require('./modules/Sparklines.js');

// Initialize the dashboard
var Dashboard = (function() {
	// Configuration options used throughout the app. These are
	// the only options that should need occasional attention or
	// updating. Eventually the date range should be determined
	// automatically.
	var defaultContext = 'state';
	var path = '/data/new-data/';
	var files = ['_context', '_data']; // files to be loaded per context
	var dateRange = [ "2000-01-01", "2015-01-01"];
	var contexts = ['state', 'county', 'region'];
	var colors = {
		main: "#3B6E8F",
		highlight: "#A3DCE6",
		accent: "green"
	};

	// Initialize the application
	function init() {
		DataService.init(defaultContext, path, files);
		ContextSwitcher.init(contexts, colors);
		FastFacts.init(defaultContext, files);
		Map.init(defaultContext, colors);
		Sparklines.init(defaultContext, files);
	}

	return {
		run: init
	}
})();

Dashboard.run();
},{"./modules/ContextSwitcher.js":2,"./modules/Dataservice.js":3,"./modules/Events.js":4,"./modules/FastFacts.js":5,"./modules/Map.js":6,"./modules/Sparklines.js":7}],2:[function(require,module,exports){
/**
 *  CONTEXT SWITCHER
 *
 *  Constructs a list of buttons that allow the user to switch between
 *  the state, region and county contexts
 */

var Events = require('./Events.js');


var ContextSwitcher = (function() {

	function init(contexts, colors) {
		appendButtons(contexts, colors);
		bindEvents(colors);
	}

	function appendButtons(contexts, colors) {
		var buttons = d3.select("#context-buttons");

		// buttons (will appear left-to-right in reverse order from laid out here)
		buttons.selectAll('.s_r_c')
			.data(contexts)
			.enter()
			.append("div")
			.attr("class", "s_r_c")
			.attr("id", function(d){ return d; })
			.text(function(d){ return d; });

		// Set default state
		d3.select("#context-buttons")
		.selectAll("div")
		.attr("checked", "unchecked")
		.style("border-color", d3.hsl(colors['main']).brighter(1.2));
	}

	function bindEvents(colors) {
		// button hover behavior
		d3.select("#context-buttons")
		.selectAll("div")
		.on("mouseover", function () {
		    d3.select(this).style("border-color", d3.hsl(colors['highlight']).brighter(0.5));
		})
		.on("mouseout", function () {
		    if (d3.select(this).attr("checked") == "unchecked") {
		        d3.select(this).style("border-color", d3.hsl(colors['main']).brighter(1.2));
		    } else {
		        d3.select(this).style("border-color", colors['highlight']);

		    }
		})
		.on('click', function() {
			var newContext;
			// Uncheck and unhighlight whatever was previously selected
			d3.selectAll('div.s_r_c')
		    .attr('checked', 'unchecked')
		    .style("border-color", d3.hsl(colors['main']).brighter(1.2));

		   // Now check and highlight the current selection
		   d3.select(this)
		    .attr('checked', 'checked')
			 .style("border-color", colors['highlight']);

			// Get the ID of the current selection and publish it as a context
			// switch event
			var id = d3.select(this).attr('id');			
			Events.publish('Switch contexts', {
				context: id
			});
		});
	}

	return {
		init: init
	}
})();

module.exports = ContextSwitcher;
},{"./Events.js":4}],3:[function(require,module,exports){
/**
 *  DATA SERVICE
 *
 *  Ingests data and distributes it to the
 *  Events modules, which makes the data
 *  available to other modules. Responds to 
 *  context changes by sending out new data for
 *  the current context.
 */

var Events = require('./Events.js');

var DataService = (function() {

    // Private variables accessible throughout the module
    // that get set on init
    var path;
    var files;

    function init(context, dataPath, filesList) {
        // Set module globals
        path = dataPath;
        files = filesList;

        // Load the data with the defaults
        loadData(context);

        // Listen for data context changes
        Events.subscribe('Switch contexts', function(obj) {
            var newContext = obj.context;
            loadData(newContext)
        });
    }

    // Loop over files that need to be loaded and load them using
    // d3.csv, then publish the data when ready
    function loadData(context) {
        var dataset;
        var filename;
        var toLoad;

        for (var i = 0; i < files.length; i++) {
            fileName = context + files[i];
            toLoad = window.location.href + path + fileName + '.csv';

            d3.csv(toLoad, function(data) {
                dataset = data;

                Events.publish(fileName, {
                    context: context,
                    data: dataset
                });
            });
        }    
    }

    return {
        init: init
    };

})();

module.exports = DataService;
},{"./Events.js":4}],4:[function(require,module,exports){
/*
 * EVENTS
 *
 * Simple pub/sub class for notifying other modules of
 * data load events.
 */

// From http://davidwalsh.name/pubsub-javascript
//
// This module provides communication about events without
// creating dependencies between other modules.

var Events = (function(){
  var topics = {};
  var hOP = topics.hasOwnProperty;

  return {
    subscribe: function(topic, listener) {
      // Create the topic's object if not yet created
      if(!hOP.call(topics, topic)) topics[topic] = [];

      // Add the listener to queue
      var index = topics[topic].push(listener) -1;

      // Provide handle back for removal of topic
      return {
        remove: function() {
          delete topics[topic][index];
        }
      };
    },
    publish: function(topic, info) {
      // If the topic doesn't exist, or there's no listeners in queue, just leave
      if(!hOP.call(topics, topic)) return;

      // Cycle through topics queue, fire!
      topics[topic].forEach(function(item) {
      		item(info != undefined ? info : {});
      });
    }
  };
})();

module.exports = Events;
},{}],5:[function(require,module,exports){
/**
 *  FAST FACTS
 *
 *  Appends fast facts to the bottom of the page with population-based
 *  demographic indicators.
 */

var Events = require('./Events.js');

var FastFacts = (function() {

	function init(defaultContext, files) {
		// Subscribe to the data load for each file we need to load
		for(var i = 0; i < files.length; i++) {
			var fileName = defaultContext + files[i];
			
			Events.subscribe(fileName, function(obj) {
				console.log(obj);
			});
		}
	}

	function update() {

	}

	function switchContext() {

	}

	function extractData() {

	}

	function appendFactsContainer() {

	}

	function appendFact(context) {

	}

	function bindEvents() {

	}

	return {
		init: init
	}
})();

module.exports = FastFacts;
},{"./Events.js":4}],6:[function(require,module,exports){
/**
 *  MAP
 *
 *  Appends an SVG mp of Washington to the page and binds
 *  data to paath fills.
 */

var Events = require('./Events.js');

var Map = (function() {
   // base colors for the map, map scale, and radio button outlines - these get 
   // manipulated with d3 functions to produce the full gradient needed for
   // the map scale
   var color_main = "#3B6E8F";
   var color_highlight = "#A3DCE6";

   // Initialize event listeners
   function init(defaultContext, colors) {
      appendMap(defaultContext, colors);

      Events.subscribe('Switch contexts', function(obj) {
         var context = obj.context;
         console.log(context);
         document.getElementById('map-container').innerHTML = '';
         appendMap(context, colors);
      });
   }

   function switchContext() {

   }

   function appendMap(context, colors) {
     // mapID and mapHeight are used in the same way regardless of context
     var mapID = 'wa_' + context + '_map';
     var mapHeight = 500;

      // Settings for region or county SVG
     var settings = getContextSettings(context);

      // First check to make sure that the map does not already exist. Each map context
      // has a different ID; if it already exists, we don't need to append the map again.
        var svg = d3.select("#map-container").append("svg")
                .attr("id", mapID)
                .attr("class", "map")
                .attr("viewBox", settings.viewBox)
                .attr("width", settings.mapWidth)
                .attr("height", mapHeight);
        
        // Loops over the data in the regions array and attaches name, id, and class to a <g> element
        var map = svg.selectAll("g")
                          .data(settings.geography)
                          .enter().append("g") 
                          .attr("class", context)
                          .attr("id", function(d){ return d.id; });

        // Appends path and "d" attribute to each item from the data
        map.append("path")
                  .attr("d",function(d){ return d.path; })
                  .attr("id", function(d){ return d.geog; })
                  .attr("name", function(d){ return d.name; })
                  .attr("transform", settings.transform)
                  .attr("class", "wa_geo_map")
                  .style("stroke","#fff")
                  .style("stroke-width", settings.strokeWidth);

      // Loops over data array and checks it against the county/region_path array. If the ID matches the name of a county/region in county/region_path, an additional path is appended to the <g> element. This catches all of the islands that cannot be captured with a single path.
        for(var i=0, c_len=settings.geography.length;i<c_len;i++){
          for(var j=0, p_len=settings.extraPaths.length;j<p_len;j++){
              if(settings.geography[i]["id"]==settings.extraPaths[j][context]){
                  d3.select("#"+settings.geography[i]["id"]).append("path")
                      .attr("d",settings.extraPaths[j]["path"])
                       .attr("class", "wa_geo_map")
                      .style("stroke","#fff")
                      .style("stroke-width", settings.strokeWidth);  
              }
          }
        }
   }

   function updateFill() {

   }

   function bindEvents() {

   }

   function getContextSettings(context) {
       var svgSettings;

       switch(context) {
         case "state":
           svgSettings = {
             viewBox: "50 50 860 500",
             geography: regions,
             extraPaths: region_path,
             transform: "translate(0, -50)",
             strokeWidth: "0",
             mapWidth: 615
           };
           break;
         case "region":
           svgSettings = {
             viewBox: "50 50 860 500",
             geography: regions,
             extraPaths: region_path,
             transform: "translate(0, -50)",
             strokeWidth: "2",
             mapWidth: 615
           };
           break;
         case "county":
           svgSettings = {
             viewBox: "-32550,-19037 59361,38626",
             geography: counties,
             extraPaths: county_path,
             transform: "translate(0, 0)",
             strokeWidth: "100",
             mapWidth: 580
           };
           break;
       }

       return svgSettings;
   }

   return {
      init: init
   }
})();

module.exports = Map;
},{"./Events.js":4}],7:[function(require,module,exports){
/**
 *  SPARKLINES
 *
 *  Appends a series of sparklines to the page sidebar with indicators related
 *  to the child welfare system in the current context
 */

var Events = require('./Events.js');

var Sparklines = (function() {

	function init(defaultContext, files) {
		// Subscribe to the data load for each file we need to load
		for(var i = 0; i < files.length; i++) {
			var fileName = defaultContext + files[i];
			
			Events.subscribe(fileName, function(obj) {
				console.log(obj);
			});
		}
	}

	function update() {

	}
	
	function switchContext() {

	}

	function appendSparklinesContainer() {

	}

	function appendSparkline(context) {

	}

	function bindEvents() {

	}

	return {
		init: init
	}
})();

module.exports = Sparklines;
},{"./Events.js":4}]},{},[1]);
